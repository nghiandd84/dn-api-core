import { RabbitHandlerConfig } from './rabbitmq.interfaces';
export declare const makeRabbitDecorator: <T extends Partial<RabbitHandlerConfig>>(input: T) => (config: Pick<RabbitHandlerConfig, Exclude<"type", keyof T> | Exclude<"exchange", keyof T> | Exclude<"routingKey", keyof T> | Exclude<"queue", keyof T> | Exclude<"queueOptions", keyof T> | Exclude<"errorBehavior", keyof T> | Exclude<"errorHandler", keyof T> | Exclude<"allowNonJsonMessages", keyof T> | Exclude<"createQueueIfNotExists", keyof T>>) => (target: any, key: any, descriptor: any) => void | TypedPropertyDescriptor<unknown>;
export declare const RabbitHandler: (config: RabbitHandlerConfig) => (target: any, key: any, descriptor: any) => void | TypedPropertyDescriptor<unknown>;
export declare const RabbitSubscribe: (config: Pick<RabbitHandlerConfig, "exchange" | "routingKey" | "queue" | "queueOptions" | "errorBehavior" | "errorHandler" | "allowNonJsonMessages" | "createQueueIfNotExists">) => (target: any, key: any, descriptor: any) => void | TypedPropertyDescriptor<unknown>;
export declare const RabbitRPC: (config: Pick<RabbitHandlerConfig, "exchange" | "routingKey" | "queue" | "queueOptions" | "errorBehavior" | "errorHandler" | "allowNonJsonMessages" | "createQueueIfNotExists">) => (target: any, key: any, descriptor: any) => void | TypedPropertyDescriptor<unknown>;
export declare const InjectRabbitMQConfig: () => ParameterDecorator;
